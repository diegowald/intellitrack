//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace IntelliTrack.Client.Application.CRUD {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("CRUDDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CRUDDataSet : global::System.Data.DataSet {
        
        private TAGSDataTable tableTAGS;
        
        private TRANSPONDERSDataTable tableTRANSPONDERS;
        
        private CATEGORIASDataTable tableCATEGORIAS;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CRUDDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CRUDDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TAGS"] != null)) {
                    base.Tables.Add(new TAGSDataTable(ds.Tables["TAGS"]));
                }
                if ((ds.Tables["TRANSPONDERS"] != null)) {
                    base.Tables.Add(new TRANSPONDERSDataTable(ds.Tables["TRANSPONDERS"]));
                }
                if ((ds.Tables["CATEGORIAS"] != null)) {
                    base.Tables.Add(new CATEGORIASDataTable(ds.Tables["CATEGORIAS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TAGSDataTable TAGS {
            get {
                return this.tableTAGS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TRANSPONDERSDataTable TRANSPONDERS {
            get {
                return this.tableTRANSPONDERS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CATEGORIASDataTable CATEGORIAS {
            get {
                return this.tableCATEGORIAS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            CRUDDataSet cln = ((CRUDDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TAGS"] != null)) {
                    base.Tables.Add(new TAGSDataTable(ds.Tables["TAGS"]));
                }
                if ((ds.Tables["TRANSPONDERS"] != null)) {
                    base.Tables.Add(new TRANSPONDERSDataTable(ds.Tables["TRANSPONDERS"]));
                }
                if ((ds.Tables["CATEGORIAS"] != null)) {
                    base.Tables.Add(new CATEGORIASDataTable(ds.Tables["CATEGORIAS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTAGS = ((TAGSDataTable)(base.Tables["TAGS"]));
            if ((initTable == true)) {
                if ((this.tableTAGS != null)) {
                    this.tableTAGS.InitVars();
                }
            }
            this.tableTRANSPONDERS = ((TRANSPONDERSDataTable)(base.Tables["TRANSPONDERS"]));
            if ((initTable == true)) {
                if ((this.tableTRANSPONDERS != null)) {
                    this.tableTRANSPONDERS.InitVars();
                }
            }
            this.tableCATEGORIAS = ((CATEGORIASDataTable)(base.Tables["CATEGORIAS"]));
            if ((initTable == true)) {
                if ((this.tableCATEGORIAS != null)) {
                    this.tableCATEGORIAS.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CRUDDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CRUDDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTAGS = new TAGSDataTable();
            base.Tables.Add(this.tableTAGS);
            this.tableTRANSPONDERS = new TRANSPONDERSDataTable();
            base.Tables.Add(this.tableTRANSPONDERS);
            this.tableCATEGORIAS = new CATEGORIASDataTable();
            base.Tables.Add(this.tableCATEGORIAS);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTAGS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTRANSPONDERS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCATEGORIAS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            CRUDDataSet ds = new CRUDDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TAGSRowChangeEventHandler(object sender, TAGSRowChangeEvent e);
        
        public delegate void TRANSPONDERSRowChangeEventHandler(object sender, TRANSPONDERSRowChangeEvent e);
        
        public delegate void CATEGORIASRowChangeEventHandler(object sender, CATEGORIASRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TAGSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRFI_ID;
            
            private global::System.Data.DataColumn columnRFI_TAG;
            
            private global::System.Data.DataColumn columnRFI_CATEGORIA;
            
            private global::System.Data.DataColumn columnRFI_VEHICULO;
            
            private global::System.Data.DataColumn columnRFI_ACTIVO;
            
            private global::System.Data.DataColumn columnRFID_USUARIO;
            
            private global::System.Data.DataColumn columnRFID_FECHA_ACT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAGSDataTable() {
                this.TableName = "TAGS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TAGSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TAGSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RFI_IDColumn {
                get {
                    return this.columnRFI_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RFI_TAGColumn {
                get {
                    return this.columnRFI_TAG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RFI_CATEGORIAColumn {
                get {
                    return this.columnRFI_CATEGORIA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RFI_VEHICULOColumn {
                get {
                    return this.columnRFI_VEHICULO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RFI_ACTIVOColumn {
                get {
                    return this.columnRFI_ACTIVO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RFID_USUARIOColumn {
                get {
                    return this.columnRFID_USUARIO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RFID_FECHA_ACTColumn {
                get {
                    return this.columnRFID_FECHA_ACT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAGSRow this[int index] {
                get {
                    return ((TAGSRow)(this.Rows[index]));
                }
            }
            
            public event TAGSRowChangeEventHandler TAGSRowChanging;
            
            public event TAGSRowChangeEventHandler TAGSRowChanged;
            
            public event TAGSRowChangeEventHandler TAGSRowDeleting;
            
            public event TAGSRowChangeEventHandler TAGSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTAGSRow(TAGSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAGSRow AddTAGSRow(string RFI_TAG, short RFI_CATEGORIA, string RFI_VEHICULO, string RFI_ACTIVO, string RFID_USUARIO, System.DateTime RFID_FECHA_ACT) {
                TAGSRow rowTAGSRow = ((TAGSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RFI_TAG,
                        RFI_CATEGORIA,
                        RFI_VEHICULO,
                        RFI_ACTIVO,
                        RFID_USUARIO,
                        RFID_FECHA_ACT};
                rowTAGSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTAGSRow);
                return rowTAGSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAGSRow FindByRFI_ID(int RFI_ID) {
                return ((TAGSRow)(this.Rows.Find(new object[] {
                            RFI_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TAGSDataTable cln = ((TAGSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TAGSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRFI_ID = base.Columns["RFI_ID"];
                this.columnRFI_TAG = base.Columns["RFI_TAG"];
                this.columnRFI_CATEGORIA = base.Columns["RFI_CATEGORIA"];
                this.columnRFI_VEHICULO = base.Columns["RFI_VEHICULO"];
                this.columnRFI_ACTIVO = base.Columns["RFI_ACTIVO"];
                this.columnRFID_USUARIO = base.Columns["RFID_USUARIO"];
                this.columnRFID_FECHA_ACT = base.Columns["RFID_FECHA_ACT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRFI_ID = new global::System.Data.DataColumn("RFI_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRFI_ID);
                this.columnRFI_TAG = new global::System.Data.DataColumn("RFI_TAG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRFI_TAG);
                this.columnRFI_CATEGORIA = new global::System.Data.DataColumn("RFI_CATEGORIA", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRFI_CATEGORIA);
                this.columnRFI_VEHICULO = new global::System.Data.DataColumn("RFI_VEHICULO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRFI_VEHICULO);
                this.columnRFI_ACTIVO = new global::System.Data.DataColumn("RFI_ACTIVO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRFI_ACTIVO);
                this.columnRFID_USUARIO = new global::System.Data.DataColumn("RFID_USUARIO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRFID_USUARIO);
                this.columnRFID_FECHA_ACT = new global::System.Data.DataColumn("RFID_FECHA_ACT", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRFID_FECHA_ACT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRFI_ID}, true));
                this.columnRFI_ID.AutoIncrement = true;
                this.columnRFI_ID.AllowDBNull = false;
                this.columnRFI_ID.ReadOnly = true;
                this.columnRFI_ID.Unique = true;
                this.columnRFI_TAG.AllowDBNull = false;
                this.columnRFI_TAG.MaxLength = 8;
                this.columnRFI_VEHICULO.MaxLength = 20;
                this.columnRFI_ACTIVO.MaxLength = 1;
                this.columnRFID_USUARIO.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAGSRow NewTAGSRow() {
                return ((TAGSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TAGSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TAGSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TAGSRowChanged != null)) {
                    this.TAGSRowChanged(this, new TAGSRowChangeEvent(((TAGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TAGSRowChanging != null)) {
                    this.TAGSRowChanging(this, new TAGSRowChangeEvent(((TAGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TAGSRowDeleted != null)) {
                    this.TAGSRowDeleted(this, new TAGSRowChangeEvent(((TAGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TAGSRowDeleting != null)) {
                    this.TAGSRowDeleting(this, new TAGSRowChangeEvent(((TAGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTAGSRow(TAGSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CRUDDataSet ds = new CRUDDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TAGSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TRANSPONDERSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTRA_ID;
            
            private global::System.Data.DataColumn columnTRA_COD_TRANSP;
            
            private global::System.Data.DataColumn columnTRA_COD_CATEGORIA;
            
            private global::System.Data.DataColumn columnTRA_VEHICULO;
            
            private global::System.Data.DataColumn columnTRA_ACTIVO;
            
            private global::System.Data.DataColumn columnTRA_USUARIO;
            
            private global::System.Data.DataColumn columnTRA_FECHA_MOD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRANSPONDERSDataTable() {
                this.TableName = "TRANSPONDERS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TRANSPONDERSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TRANSPONDERSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRA_IDColumn {
                get {
                    return this.columnTRA_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRA_COD_TRANSPColumn {
                get {
                    return this.columnTRA_COD_TRANSP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRA_COD_CATEGORIAColumn {
                get {
                    return this.columnTRA_COD_CATEGORIA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRA_VEHICULOColumn {
                get {
                    return this.columnTRA_VEHICULO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRA_ACTIVOColumn {
                get {
                    return this.columnTRA_ACTIVO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRA_USUARIOColumn {
                get {
                    return this.columnTRA_USUARIO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRA_FECHA_MODColumn {
                get {
                    return this.columnTRA_FECHA_MOD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRANSPONDERSRow this[int index] {
                get {
                    return ((TRANSPONDERSRow)(this.Rows[index]));
                }
            }
            
            public event TRANSPONDERSRowChangeEventHandler TRANSPONDERSRowChanging;
            
            public event TRANSPONDERSRowChangeEventHandler TRANSPONDERSRowChanged;
            
            public event TRANSPONDERSRowChangeEventHandler TRANSPONDERSRowDeleting;
            
            public event TRANSPONDERSRowChangeEventHandler TRANSPONDERSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTRANSPONDERSRow(TRANSPONDERSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRANSPONDERSRow AddTRANSPONDERSRow(string TRA_COD_TRANSP, short TRA_COD_CATEGORIA, string TRA_VEHICULO, string TRA_ACTIVO, string TRA_USUARIO, System.DateTime TRA_FECHA_MOD) {
                TRANSPONDERSRow rowTRANSPONDERSRow = ((TRANSPONDERSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TRA_COD_TRANSP,
                        TRA_COD_CATEGORIA,
                        TRA_VEHICULO,
                        TRA_ACTIVO,
                        TRA_USUARIO,
                        TRA_FECHA_MOD};
                rowTRANSPONDERSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTRANSPONDERSRow);
                return rowTRANSPONDERSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRANSPONDERSRow FindByTRA_ID(int TRA_ID) {
                return ((TRANSPONDERSRow)(this.Rows.Find(new object[] {
                            TRA_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TRANSPONDERSDataTable cln = ((TRANSPONDERSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TRANSPONDERSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTRA_ID = base.Columns["TRA_ID"];
                this.columnTRA_COD_TRANSP = base.Columns["TRA_COD_TRANSP"];
                this.columnTRA_COD_CATEGORIA = base.Columns["TRA_COD_CATEGORIA"];
                this.columnTRA_VEHICULO = base.Columns["TRA_VEHICULO"];
                this.columnTRA_ACTIVO = base.Columns["TRA_ACTIVO"];
                this.columnTRA_USUARIO = base.Columns["TRA_USUARIO"];
                this.columnTRA_FECHA_MOD = base.Columns["TRA_FECHA_MOD"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTRA_ID = new global::System.Data.DataColumn("TRA_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRA_ID);
                this.columnTRA_COD_TRANSP = new global::System.Data.DataColumn("TRA_COD_TRANSP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRA_COD_TRANSP);
                this.columnTRA_COD_CATEGORIA = new global::System.Data.DataColumn("TRA_COD_CATEGORIA", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRA_COD_CATEGORIA);
                this.columnTRA_VEHICULO = new global::System.Data.DataColumn("TRA_VEHICULO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRA_VEHICULO);
                this.columnTRA_ACTIVO = new global::System.Data.DataColumn("TRA_ACTIVO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRA_ACTIVO);
                this.columnTRA_USUARIO = new global::System.Data.DataColumn("TRA_USUARIO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRA_USUARIO);
                this.columnTRA_FECHA_MOD = new global::System.Data.DataColumn("TRA_FECHA_MOD", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRA_FECHA_MOD);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTRA_ID}, true));
                this.columnTRA_ID.AutoIncrement = true;
                this.columnTRA_ID.AllowDBNull = false;
                this.columnTRA_ID.ReadOnly = true;
                this.columnTRA_ID.Unique = true;
                this.columnTRA_COD_TRANSP.AllowDBNull = false;
                this.columnTRA_COD_TRANSP.MaxLength = 4;
                this.columnTRA_COD_CATEGORIA.AllowDBNull = false;
                this.columnTRA_VEHICULO.MaxLength = 50;
                this.columnTRA_ACTIVO.AllowDBNull = false;
                this.columnTRA_ACTIVO.MaxLength = 1;
                this.columnTRA_USUARIO.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRANSPONDERSRow NewTRANSPONDERSRow() {
                return ((TRANSPONDERSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TRANSPONDERSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TRANSPONDERSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TRANSPONDERSRowChanged != null)) {
                    this.TRANSPONDERSRowChanged(this, new TRANSPONDERSRowChangeEvent(((TRANSPONDERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TRANSPONDERSRowChanging != null)) {
                    this.TRANSPONDERSRowChanging(this, new TRANSPONDERSRowChangeEvent(((TRANSPONDERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TRANSPONDERSRowDeleted != null)) {
                    this.TRANSPONDERSRowDeleted(this, new TRANSPONDERSRowChangeEvent(((TRANSPONDERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TRANSPONDERSRowDeleting != null)) {
                    this.TRANSPONDERSRowDeleting(this, new TRANSPONDERSRowChangeEvent(((TRANSPONDERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTRANSPONDERSRow(TRANSPONDERSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CRUDDataSet ds = new CRUDDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TRANSPONDERSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CATEGORIASDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCAT_ID;
            
            private global::System.Data.DataColumn columnCAT_DESCRIPCION;
            
            private global::System.Data.DataColumn columnCAT_EDITABLE;
            
            private global::System.Data.DataColumn columnCAT_USUARIO;
            
            private global::System.Data.DataColumn columnCAT_FECHA_MOD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIASDataTable() {
                this.TableName = "CATEGORIAS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CATEGORIASDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CATEGORIASDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CAT_IDColumn {
                get {
                    return this.columnCAT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CAT_DESCRIPCIONColumn {
                get {
                    return this.columnCAT_DESCRIPCION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CAT_EDITABLEColumn {
                get {
                    return this.columnCAT_EDITABLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CAT_USUARIOColumn {
                get {
                    return this.columnCAT_USUARIO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CAT_FECHA_MODColumn {
                get {
                    return this.columnCAT_FECHA_MOD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIASRow this[int index] {
                get {
                    return ((CATEGORIASRow)(this.Rows[index]));
                }
            }
            
            public event CATEGORIASRowChangeEventHandler CATEGORIASRowChanging;
            
            public event CATEGORIASRowChangeEventHandler CATEGORIASRowChanged;
            
            public event CATEGORIASRowChangeEventHandler CATEGORIASRowDeleting;
            
            public event CATEGORIASRowChangeEventHandler CATEGORIASRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCATEGORIASRow(CATEGORIASRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIASRow AddCATEGORIASRow(string CAT_DESCRIPCION, string CAT_EDITABLE, string CAT_USUARIO, System.DateTime CAT_FECHA_MOD) {
                CATEGORIASRow rowCATEGORIASRow = ((CATEGORIASRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CAT_DESCRIPCION,
                        CAT_EDITABLE,
                        CAT_USUARIO,
                        CAT_FECHA_MOD};
                rowCATEGORIASRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCATEGORIASRow);
                return rowCATEGORIASRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIASRow FindByCAT_ID(short CAT_ID) {
                return ((CATEGORIASRow)(this.Rows.Find(new object[] {
                            CAT_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CATEGORIASDataTable cln = ((CATEGORIASDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CATEGORIASDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCAT_ID = base.Columns["CAT_ID"];
                this.columnCAT_DESCRIPCION = base.Columns["CAT_DESCRIPCION"];
                this.columnCAT_EDITABLE = base.Columns["CAT_EDITABLE"];
                this.columnCAT_USUARIO = base.Columns["CAT_USUARIO"];
                this.columnCAT_FECHA_MOD = base.Columns["CAT_FECHA_MOD"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCAT_ID = new global::System.Data.DataColumn("CAT_ID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAT_ID);
                this.columnCAT_DESCRIPCION = new global::System.Data.DataColumn("CAT_DESCRIPCION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAT_DESCRIPCION);
                this.columnCAT_EDITABLE = new global::System.Data.DataColumn("CAT_EDITABLE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAT_EDITABLE);
                this.columnCAT_USUARIO = new global::System.Data.DataColumn("CAT_USUARIO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAT_USUARIO);
                this.columnCAT_FECHA_MOD = new global::System.Data.DataColumn("CAT_FECHA_MOD", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAT_FECHA_MOD);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCAT_ID}, true));
                this.columnCAT_ID.AutoIncrement = true;
                this.columnCAT_ID.AllowDBNull = false;
                this.columnCAT_ID.ReadOnly = true;
                this.columnCAT_ID.Unique = true;
                this.columnCAT_DESCRIPCION.AllowDBNull = false;
                this.columnCAT_DESCRIPCION.MaxLength = 50;
                this.columnCAT_EDITABLE.MaxLength = 1;
                this.columnCAT_USUARIO.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIASRow NewCATEGORIASRow() {
                return ((CATEGORIASRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CATEGORIASRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CATEGORIASRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CATEGORIASRowChanged != null)) {
                    this.CATEGORIASRowChanged(this, new CATEGORIASRowChangeEvent(((CATEGORIASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CATEGORIASRowChanging != null)) {
                    this.CATEGORIASRowChanging(this, new CATEGORIASRowChangeEvent(((CATEGORIASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CATEGORIASRowDeleted != null)) {
                    this.CATEGORIASRowDeleted(this, new CATEGORIASRowChangeEvent(((CATEGORIASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CATEGORIASRowDeleting != null)) {
                    this.CATEGORIASRowDeleting(this, new CATEGORIASRowChangeEvent(((CATEGORIASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCATEGORIASRow(CATEGORIASRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CRUDDataSet ds = new CRUDDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CATEGORIASDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TAGSRow : global::System.Data.DataRow {
            
            private TAGSDataTable tableTAGS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TAGSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTAGS = ((TAGSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RFI_ID {
                get {
                    return ((int)(this[this.tableTAGS.RFI_IDColumn]));
                }
                set {
                    this[this.tableTAGS.RFI_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RFI_TAG {
                get {
                    return ((string)(this[this.tableTAGS.RFI_TAGColumn]));
                }
                set {
                    this[this.tableTAGS.RFI_TAGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RFI_CATEGORIA {
                get {
                    try {
                        return ((short)(this[this.tableTAGS.RFI_CATEGORIAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RFI_CATEGORIA\' in table \'TAGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTAGS.RFI_CATEGORIAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RFI_VEHICULO {
                get {
                    try {
                        return ((string)(this[this.tableTAGS.RFI_VEHICULOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RFI_VEHICULO\' in table \'TAGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTAGS.RFI_VEHICULOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RFI_ACTIVO {
                get {
                    try {
                        return ((string)(this[this.tableTAGS.RFI_ACTIVOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RFI_ACTIVO\' in table \'TAGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTAGS.RFI_ACTIVOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RFID_USUARIO {
                get {
                    try {
                        return ((string)(this[this.tableTAGS.RFID_USUARIOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RFID_USUARIO\' in table \'TAGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTAGS.RFID_USUARIOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RFID_FECHA_ACT {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTAGS.RFID_FECHA_ACTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RFID_FECHA_ACT\' in table \'TAGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTAGS.RFID_FECHA_ACTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRFI_CATEGORIANull() {
                return this.IsNull(this.tableTAGS.RFI_CATEGORIAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRFI_CATEGORIANull() {
                this[this.tableTAGS.RFI_CATEGORIAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRFI_VEHICULONull() {
                return this.IsNull(this.tableTAGS.RFI_VEHICULOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRFI_VEHICULONull() {
                this[this.tableTAGS.RFI_VEHICULOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRFI_ACTIVONull() {
                return this.IsNull(this.tableTAGS.RFI_ACTIVOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRFI_ACTIVONull() {
                this[this.tableTAGS.RFI_ACTIVOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRFID_USUARIONull() {
                return this.IsNull(this.tableTAGS.RFID_USUARIOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRFID_USUARIONull() {
                this[this.tableTAGS.RFID_USUARIOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRFID_FECHA_ACTNull() {
                return this.IsNull(this.tableTAGS.RFID_FECHA_ACTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRFID_FECHA_ACTNull() {
                this[this.tableTAGS.RFID_FECHA_ACTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TRANSPONDERSRow : global::System.Data.DataRow {
            
            private TRANSPONDERSDataTable tableTRANSPONDERS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TRANSPONDERSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTRANSPONDERS = ((TRANSPONDERSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TRA_ID {
                get {
                    return ((int)(this[this.tableTRANSPONDERS.TRA_IDColumn]));
                }
                set {
                    this[this.tableTRANSPONDERS.TRA_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRA_COD_TRANSP {
                get {
                    return ((string)(this[this.tableTRANSPONDERS.TRA_COD_TRANSPColumn]));
                }
                set {
                    this[this.tableTRANSPONDERS.TRA_COD_TRANSPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short TRA_COD_CATEGORIA {
                get {
                    return ((short)(this[this.tableTRANSPONDERS.TRA_COD_CATEGORIAColumn]));
                }
                set {
                    this[this.tableTRANSPONDERS.TRA_COD_CATEGORIAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRA_VEHICULO {
                get {
                    try {
                        return ((string)(this[this.tableTRANSPONDERS.TRA_VEHICULOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRA_VEHICULO\' in table \'TRANSPONDERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANSPONDERS.TRA_VEHICULOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRA_ACTIVO {
                get {
                    return ((string)(this[this.tableTRANSPONDERS.TRA_ACTIVOColumn]));
                }
                set {
                    this[this.tableTRANSPONDERS.TRA_ACTIVOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRA_USUARIO {
                get {
                    try {
                        return ((string)(this[this.tableTRANSPONDERS.TRA_USUARIOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRA_USUARIO\' in table \'TRANSPONDERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANSPONDERS.TRA_USUARIOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TRA_FECHA_MOD {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTRANSPONDERS.TRA_FECHA_MODColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRA_FECHA_MOD\' in table \'TRANSPONDERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANSPONDERS.TRA_FECHA_MODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRA_VEHICULONull() {
                return this.IsNull(this.tableTRANSPONDERS.TRA_VEHICULOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRA_VEHICULONull() {
                this[this.tableTRANSPONDERS.TRA_VEHICULOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRA_USUARIONull() {
                return this.IsNull(this.tableTRANSPONDERS.TRA_USUARIOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRA_USUARIONull() {
                this[this.tableTRANSPONDERS.TRA_USUARIOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRA_FECHA_MODNull() {
                return this.IsNull(this.tableTRANSPONDERS.TRA_FECHA_MODColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRA_FECHA_MODNull() {
                this[this.tableTRANSPONDERS.TRA_FECHA_MODColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CATEGORIASRow : global::System.Data.DataRow {
            
            private CATEGORIASDataTable tableCATEGORIAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CATEGORIASRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCATEGORIAS = ((CATEGORIASDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CAT_ID {
                get {
                    return ((short)(this[this.tableCATEGORIAS.CAT_IDColumn]));
                }
                set {
                    this[this.tableCATEGORIAS.CAT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAT_DESCRIPCION {
                get {
                    return ((string)(this[this.tableCATEGORIAS.CAT_DESCRIPCIONColumn]));
                }
                set {
                    this[this.tableCATEGORIAS.CAT_DESCRIPCIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAT_EDITABLE {
                get {
                    try {
                        return ((string)(this[this.tableCATEGORIAS.CAT_EDITABLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CAT_EDITABLE\' in table \'CATEGORIAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCATEGORIAS.CAT_EDITABLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAT_USUARIO {
                get {
                    try {
                        return ((string)(this[this.tableCATEGORIAS.CAT_USUARIOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CAT_USUARIO\' in table \'CATEGORIAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCATEGORIAS.CAT_USUARIOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CAT_FECHA_MOD {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCATEGORIAS.CAT_FECHA_MODColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CAT_FECHA_MOD\' in table \'CATEGORIAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCATEGORIAS.CAT_FECHA_MODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAT_EDITABLENull() {
                return this.IsNull(this.tableCATEGORIAS.CAT_EDITABLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAT_EDITABLENull() {
                this[this.tableCATEGORIAS.CAT_EDITABLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAT_USUARIONull() {
                return this.IsNull(this.tableCATEGORIAS.CAT_USUARIOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAT_USUARIONull() {
                this[this.tableCATEGORIAS.CAT_USUARIOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAT_FECHA_MODNull() {
                return this.IsNull(this.tableCATEGORIAS.CAT_FECHA_MODColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAT_FECHA_MODNull() {
                this[this.tableCATEGORIAS.CAT_FECHA_MODColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TAGSRowChangeEvent : global::System.EventArgs {
            
            private TAGSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAGSRowChangeEvent(TAGSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAGSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TRANSPONDERSRowChangeEvent : global::System.EventArgs {
            
            private TRANSPONDERSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRANSPONDERSRowChangeEvent(TRANSPONDERSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRANSPONDERSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CATEGORIASRowChangeEvent : global::System.EventArgs {
            
            private CATEGORIASRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIASRowChangeEvent(CATEGORIASRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIASRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace IntelliTrack.Client.Application.CRUD.CRUDDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TAGSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAGSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TAGS";
            tableMapping.ColumnMappings.Add("RFI_ID", "RFI_ID");
            tableMapping.ColumnMappings.Add("RFI_TAG", "RFI_TAG");
            tableMapping.ColumnMappings.Add("RFI_CATEGORIA", "RFI_CATEGORIA");
            tableMapping.ColumnMappings.Add("RFI_VEHICULO", "RFI_VEHICULO");
            tableMapping.ColumnMappings.Add("RFI_ACTIVO", "RFI_ACTIVO");
            tableMapping.ColumnMappings.Add("RFID_USUARIO", "RFID_USUARIO");
            tableMapping.ColumnMappings.Add("RFID_FECHA_ACT", "RFID_FECHA_ACT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM TAGS\r\nWHERE     (RFI_ID = @Original_RFI_ID)";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFI_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TAGS] ([RFI_TAG], [RFI_CATEGORIA], [RFI_VEHICULO], [RFI_ACTIVO], [RFID_USUARIO], [RFID_FECHA_ACT]) VALUES (@RFI_TAG, @RFI_CATEGORIA, @RFI_VEHICULO, @RFI_ACTIVO, @RFID_USUARIO, @RFID_FECHA_ACT);
SELECT RFI_ID, RFI_TAG, RFI_CATEGORIA, RFI_VEHICULO, RFI_ACTIVO, RFID_USUARIO, RFID_FECHA_ACT FROM TAGS WHERE (RFI_ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFI_TAG", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_TAG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFI_CATEGORIA", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_CATEGORIA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFI_VEHICULO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_VEHICULO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFI_ACTIVO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_ACTIVO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFID_USUARIO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFID_USUARIO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFID_FECHA_ACT", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFID_FECHA_ACT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TAGS] SET [RFI_TAG] = @RFI_TAG, [RFI_CATEGORIA] = @RFI_CATEGORIA, [RFI_VEHICULO] = @RFI_VEHICULO, [RFI_ACTIVO] = @RFI_ACTIVO, [RFID_USUARIO] = @RFID_USUARIO, [RFID_FECHA_ACT] = @RFID_FECHA_ACT WHERE (([RFI_ID] = @Original_RFI_ID) AND ([RFI_TAG] = @Original_RFI_TAG) AND ((@IsNull_RFI_CATEGORIA = 1 AND [RFI_CATEGORIA] IS NULL) OR ([RFI_CATEGORIA] = @Original_RFI_CATEGORIA)) AND ((@IsNull_RFI_VEHICULO = 1 AND [RFI_VEHICULO] IS NULL) OR ([RFI_VEHICULO] = @Original_RFI_VEHICULO)) AND ((@IsNull_RFI_ACTIVO = 1 AND [RFI_ACTIVO] IS NULL) OR ([RFI_ACTIVO] = @Original_RFI_ACTIVO)) AND ((@IsNull_RFID_USUARIO = 1 AND [RFID_USUARIO] IS NULL) OR ([RFID_USUARIO] = @Original_RFID_USUARIO)) AND ((@IsNull_RFID_FECHA_ACT = 1 AND [RFID_FECHA_ACT] IS NULL) OR ([RFID_FECHA_ACT] = @Original_RFID_FECHA_ACT)));
SELECT RFI_ID, RFI_TAG, RFI_CATEGORIA, RFI_VEHICULO, RFI_ACTIVO, RFID_USUARIO, RFID_FECHA_ACT FROM TAGS WHERE (RFI_ID = @RFI_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFI_TAG", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_TAG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFI_CATEGORIA", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_CATEGORIA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFI_VEHICULO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_VEHICULO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFI_ACTIVO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_ACTIVO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFID_USUARIO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFID_USUARIO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFID_FECHA_ACT", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFID_FECHA_ACT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFI_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFI_TAG", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_TAG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RFI_CATEGORIA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_CATEGORIA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFI_CATEGORIA", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_CATEGORIA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RFI_VEHICULO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_VEHICULO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFI_VEHICULO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_VEHICULO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RFI_ACTIVO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_ACTIVO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFI_ACTIVO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_ACTIVO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RFID_USUARIO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFID_USUARIO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFID_USUARIO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFID_USUARIO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RFID_FECHA_ACT", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFID_FECHA_ACT", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFID_FECHA_ACT", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFID_FECHA_ACT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFI_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RFI_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = ValidacionSeguridad.Instance.GetApplicationConnectionString();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT RFI_ID, RFI_TAG, RFI_CATEGORIA, RFI_VEHICULO, RFI_ACTIVO, RFID_USUARIO, RF" +
                "ID_FECHA_ACT FROM dbo.TAGS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CRUDDataSet.TAGSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CRUDDataSet.TAGSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CRUDDataSet.TAGSDataTable dataTable = new CRUDDataSet.TAGSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CRUDDataSet.TAGSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CRUDDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TAGS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_RFI_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_RFI_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string RFI_TAG, global::System.Nullable<short> RFI_CATEGORIA, string RFI_VEHICULO, string RFI_ACTIVO, string RFID_USUARIO, global::System.Nullable<global::System.DateTime> RFID_FECHA_ACT) {
            if ((RFI_TAG == null)) {
                throw new global::System.ArgumentNullException("RFI_TAG");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(RFI_TAG));
            }
            if ((RFI_CATEGORIA.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((short)(RFI_CATEGORIA.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((RFI_VEHICULO == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(RFI_VEHICULO));
            }
            if ((RFI_ACTIVO == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(RFI_ACTIVO));
            }
            if ((RFID_USUARIO == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(RFID_USUARIO));
            }
            if ((RFID_FECHA_ACT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(RFID_FECHA_ACT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string RFI_TAG, global::System.Nullable<short> RFI_CATEGORIA, string RFI_VEHICULO, string RFI_ACTIVO, string RFID_USUARIO, global::System.Nullable<global::System.DateTime> RFID_FECHA_ACT, int Original_RFI_ID, string Original_RFI_TAG, global::System.Nullable<short> Original_RFI_CATEGORIA, string Original_RFI_VEHICULO, string Original_RFI_ACTIVO, string Original_RFID_USUARIO, global::System.Nullable<global::System.DateTime> Original_RFID_FECHA_ACT, int RFI_ID) {
            if ((RFI_TAG == null)) {
                throw new global::System.ArgumentNullException("RFI_TAG");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(RFI_TAG));
            }
            if ((RFI_CATEGORIA.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((short)(RFI_CATEGORIA.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((RFI_VEHICULO == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(RFI_VEHICULO));
            }
            if ((RFI_ACTIVO == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(RFI_ACTIVO));
            }
            if ((RFID_USUARIO == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(RFID_USUARIO));
            }
            if ((RFID_FECHA_ACT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(RFID_FECHA_ACT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_RFI_ID));
            if ((Original_RFI_TAG == null)) {
                throw new global::System.ArgumentNullException("Original_RFI_TAG");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_RFI_TAG));
            }
            if ((Original_RFI_CATEGORIA.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((short)(Original_RFI_CATEGORIA.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_RFI_VEHICULO == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_RFI_VEHICULO));
            }
            if ((Original_RFI_ACTIVO == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_RFI_ACTIVO));
            }
            if ((Original_RFID_USUARIO == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_RFID_USUARIO));
            }
            if ((Original_RFID_FECHA_ACT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(Original_RFID_FECHA_ACT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(RFI_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string RFI_TAG, global::System.Nullable<short> RFI_CATEGORIA, string RFI_VEHICULO, string RFI_ACTIVO, string RFID_USUARIO, global::System.Nullable<global::System.DateTime> RFID_FECHA_ACT, int Original_RFI_ID, string Original_RFI_TAG, global::System.Nullable<short> Original_RFI_CATEGORIA, string Original_RFI_VEHICULO, string Original_RFI_ACTIVO, string Original_RFID_USUARIO, global::System.Nullable<global::System.DateTime> Original_RFID_FECHA_ACT) {
            return this.Update(RFI_TAG, RFI_CATEGORIA, RFI_VEHICULO, RFI_ACTIVO, RFID_USUARIO, RFID_FECHA_ACT, Original_RFI_ID, Original_RFI_TAG, Original_RFI_CATEGORIA, Original_RFI_VEHICULO, Original_RFI_ACTIVO, Original_RFID_USUARIO, Original_RFID_FECHA_ACT, Original_RFI_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TRANSPONDERSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSPONDERSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TRANSPONDERS";
            tableMapping.ColumnMappings.Add("TRA_ID", "TRA_ID");
            tableMapping.ColumnMappings.Add("TRA_COD_TRANSP", "TRA_COD_TRANSP");
            tableMapping.ColumnMappings.Add("TRA_COD_CATEGORIA", "TRA_COD_CATEGORIA");
            tableMapping.ColumnMappings.Add("TRA_VEHICULO", "TRA_VEHICULO");
            tableMapping.ColumnMappings.Add("TRA_ACTIVO", "TRA_ACTIVO");
            tableMapping.ColumnMappings.Add("TRA_USUARIO", "TRA_USUARIO");
            tableMapping.ColumnMappings.Add("TRA_FECHA_MOD", "TRA_FECHA_MOD");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM TRANSPONDERS\r\nWHERE     (TRA_ID = @Original_TRA_ID)";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TRA_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TRANSPONDERS] ([TRA_COD_TRANSP], [TRA_COD_CATEGORIA], [TRA_VEHICULO], [TRA_ACTIVO], [TRA_USUARIO], [TRA_FECHA_MOD]) VALUES (@TRA_COD_TRANSP, @TRA_COD_CATEGORIA, @TRA_VEHICULO, @TRA_ACTIVO, @TRA_USUARIO, @TRA_FECHA_MOD);
SELECT TRA_ID, TRA_COD_TRANSP, TRA_COD_CATEGORIA, TRA_VEHICULO, TRA_ACTIVO, TRA_USUARIO, TRA_FECHA_MOD FROM TRANSPONDERS WHERE (TRA_ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TRA_COD_TRANSP", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_COD_TRANSP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TRA_COD_CATEGORIA", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_COD_CATEGORIA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TRA_VEHICULO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_VEHICULO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TRA_ACTIVO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_ACTIVO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TRA_USUARIO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_USUARIO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TRA_FECHA_MOD", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_FECHA_MOD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TRANSPONDERS] SET [TRA_COD_TRANSP] = @TRA_COD_TRANSP, [TRA_COD_CATEGORIA] = @TRA_COD_CATEGORIA, [TRA_VEHICULO] = @TRA_VEHICULO, [TRA_ACTIVO] = @TRA_ACTIVO, [TRA_USUARIO] = @TRA_USUARIO, [TRA_FECHA_MOD] = @TRA_FECHA_MOD WHERE (([TRA_ID] = @Original_TRA_ID) AND ([TRA_COD_TRANSP] = @Original_TRA_COD_TRANSP) AND ([TRA_COD_CATEGORIA] = @Original_TRA_COD_CATEGORIA) AND ((@IsNull_TRA_VEHICULO = 1 AND [TRA_VEHICULO] IS NULL) OR ([TRA_VEHICULO] = @Original_TRA_VEHICULO)) AND ([TRA_ACTIVO] = @Original_TRA_ACTIVO) AND ((@IsNull_TRA_USUARIO = 1 AND [TRA_USUARIO] IS NULL) OR ([TRA_USUARIO] = @Original_TRA_USUARIO)) AND ((@IsNull_TRA_FECHA_MOD = 1 AND [TRA_FECHA_MOD] IS NULL) OR ([TRA_FECHA_MOD] = @Original_TRA_FECHA_MOD)));
SELECT TRA_ID, TRA_COD_TRANSP, TRA_COD_CATEGORIA, TRA_VEHICULO, TRA_ACTIVO, TRA_USUARIO, TRA_FECHA_MOD FROM TRANSPONDERS WHERE (TRA_ID = @TRA_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TRA_COD_TRANSP", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_COD_TRANSP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TRA_COD_CATEGORIA", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_COD_CATEGORIA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TRA_VEHICULO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_VEHICULO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TRA_ACTIVO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_ACTIVO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TRA_USUARIO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_USUARIO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TRA_FECHA_MOD", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_FECHA_MOD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TRA_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TRA_COD_TRANSP", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_COD_TRANSP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TRA_COD_CATEGORIA", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_COD_CATEGORIA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TRA_VEHICULO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_VEHICULO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TRA_VEHICULO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_VEHICULO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TRA_ACTIVO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_ACTIVO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TRA_USUARIO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_USUARIO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TRA_USUARIO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_USUARIO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TRA_FECHA_MOD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_FECHA_MOD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TRA_FECHA_MOD", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_FECHA_MOD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TRA_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TRA_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = ValidacionSeguridad.Instance.GetApplicationConnectionString();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TRA_ID, TRA_COD_TRANSP, TRA_COD_CATEGORIA, TRA_VEHICULO, TRA_ACTIVO, TRA_U" +
                "SUARIO, TRA_FECHA_MOD FROM dbo.TRANSPONDERS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CRUDDataSet.TRANSPONDERSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CRUDDataSet.TRANSPONDERSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CRUDDataSet.TRANSPONDERSDataTable dataTable = new CRUDDataSet.TRANSPONDERSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CRUDDataSet.TRANSPONDERSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CRUDDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TRANSPONDERS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_TRA_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_TRA_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TRA_COD_TRANSP, short TRA_COD_CATEGORIA, string TRA_VEHICULO, string TRA_ACTIVO, string TRA_USUARIO, global::System.Nullable<global::System.DateTime> TRA_FECHA_MOD) {
            if ((TRA_COD_TRANSP == null)) {
                throw new global::System.ArgumentNullException("TRA_COD_TRANSP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TRA_COD_TRANSP));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((short)(TRA_COD_CATEGORIA));
            if ((TRA_VEHICULO == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TRA_VEHICULO));
            }
            if ((TRA_ACTIVO == null)) {
                throw new global::System.ArgumentNullException("TRA_ACTIVO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TRA_ACTIVO));
            }
            if ((TRA_USUARIO == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(TRA_USUARIO));
            }
            if ((TRA_FECHA_MOD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(TRA_FECHA_MOD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TRA_COD_TRANSP, short TRA_COD_CATEGORIA, string TRA_VEHICULO, string TRA_ACTIVO, string TRA_USUARIO, global::System.Nullable<global::System.DateTime> TRA_FECHA_MOD, int Original_TRA_ID, string Original_TRA_COD_TRANSP, short Original_TRA_COD_CATEGORIA, string Original_TRA_VEHICULO, string Original_TRA_ACTIVO, string Original_TRA_USUARIO, global::System.Nullable<global::System.DateTime> Original_TRA_FECHA_MOD, int TRA_ID) {
            if ((TRA_COD_TRANSP == null)) {
                throw new global::System.ArgumentNullException("TRA_COD_TRANSP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TRA_COD_TRANSP));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((short)(TRA_COD_CATEGORIA));
            if ((TRA_VEHICULO == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TRA_VEHICULO));
            }
            if ((TRA_ACTIVO == null)) {
                throw new global::System.ArgumentNullException("TRA_ACTIVO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TRA_ACTIVO));
            }
            if ((TRA_USUARIO == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(TRA_USUARIO));
            }
            if ((TRA_FECHA_MOD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(TRA_FECHA_MOD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_TRA_ID));
            if ((Original_TRA_COD_TRANSP == null)) {
                throw new global::System.ArgumentNullException("Original_TRA_COD_TRANSP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_TRA_COD_TRANSP));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((short)(Original_TRA_COD_CATEGORIA));
            if ((Original_TRA_VEHICULO == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_TRA_VEHICULO));
            }
            if ((Original_TRA_ACTIVO == null)) {
                throw new global::System.ArgumentNullException("Original_TRA_ACTIVO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_TRA_ACTIVO));
            }
            if ((Original_TRA_USUARIO == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_TRA_USUARIO));
            }
            if ((Original_TRA_FECHA_MOD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(Original_TRA_FECHA_MOD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(TRA_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TRA_COD_TRANSP, short TRA_COD_CATEGORIA, string TRA_VEHICULO, string TRA_ACTIVO, string TRA_USUARIO, global::System.Nullable<global::System.DateTime> TRA_FECHA_MOD, int Original_TRA_ID, string Original_TRA_COD_TRANSP, short Original_TRA_COD_CATEGORIA, string Original_TRA_VEHICULO, string Original_TRA_ACTIVO, string Original_TRA_USUARIO, global::System.Nullable<global::System.DateTime> Original_TRA_FECHA_MOD) {
            return this.Update(TRA_COD_TRANSP, TRA_COD_CATEGORIA, TRA_VEHICULO, TRA_ACTIVO, TRA_USUARIO, TRA_FECHA_MOD, Original_TRA_ID, Original_TRA_COD_TRANSP, Original_TRA_COD_CATEGORIA, Original_TRA_VEHICULO, Original_TRA_ACTIVO, Original_TRA_USUARIO, Original_TRA_FECHA_MOD, Original_TRA_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CATEGORIASTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CATEGORIASTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CATEGORIAS";
            tableMapping.ColumnMappings.Add("CAT_ID", "CAT_ID");
            tableMapping.ColumnMappings.Add("CAT_DESCRIPCION", "CAT_DESCRIPCION");
            tableMapping.ColumnMappings.Add("CAT_EDITABLE", "CAT_EDITABLE");
            tableMapping.ColumnMappings.Add("CAT_USUARIO", "CAT_USUARIO");
            tableMapping.ColumnMappings.Add("CAT_FECHA_MOD", "CAT_FECHA_MOD");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM CATEGORIAS\r\nWHERE     (CAT_ID = @Original_CAT_ID)";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CAT_ID", global::System.Data.SqlDbType.SmallInt, 2, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[CATEGORIAS] ([CAT_DESCRIPCION], [CAT_EDITABLE], [CAT_USUARIO], [CAT_FECHA_MOD]) VALUES (@CAT_DESCRIPCION, @CAT_EDITABLE, @CAT_USUARIO, @CAT_FECHA_MOD);
SELECT CAT_ID, CAT_DESCRIPCION, CAT_EDITABLE, CAT_USUARIO, CAT_FECHA_MOD FROM CATEGORIAS WHERE (CAT_ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CAT_DESCRIPCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_DESCRIPCION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CAT_EDITABLE", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_EDITABLE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CAT_USUARIO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_USUARIO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CAT_FECHA_MOD", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_FECHA_MOD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CATEGORIAS] SET [CAT_DESCRIPCION] = @CAT_DESCRIPCION, [CAT_EDITABLE] = @CAT_EDITABLE, [CAT_USUARIO] = @CAT_USUARIO, [CAT_FECHA_MOD] = @CAT_FECHA_MOD WHERE (([CAT_ID] = @Original_CAT_ID) AND ([CAT_DESCRIPCION] = @Original_CAT_DESCRIPCION) AND ((@IsNull_CAT_EDITABLE = 1 AND [CAT_EDITABLE] IS NULL) OR ([CAT_EDITABLE] = @Original_CAT_EDITABLE)) AND ((@IsNull_CAT_USUARIO = 1 AND [CAT_USUARIO] IS NULL) OR ([CAT_USUARIO] = @Original_CAT_USUARIO)) AND ((@IsNull_CAT_FECHA_MOD = 1 AND [CAT_FECHA_MOD] IS NULL) OR ([CAT_FECHA_MOD] = @Original_CAT_FECHA_MOD)));
SELECT CAT_ID, CAT_DESCRIPCION, CAT_EDITABLE, CAT_USUARIO, CAT_FECHA_MOD FROM CATEGORIAS WHERE (CAT_ID = @CAT_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CAT_DESCRIPCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_DESCRIPCION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CAT_EDITABLE", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_EDITABLE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CAT_USUARIO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_USUARIO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CAT_FECHA_MOD", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_FECHA_MOD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CAT_ID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CAT_DESCRIPCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_DESCRIPCION", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CAT_EDITABLE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_EDITABLE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CAT_EDITABLE", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_EDITABLE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CAT_USUARIO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_USUARIO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CAT_USUARIO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_USUARIO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CAT_FECHA_MOD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_FECHA_MOD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CAT_FECHA_MOD", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_FECHA_MOD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CAT_ID", global::System.Data.SqlDbType.SmallInt, 2, global::System.Data.ParameterDirection.Input, 0, 0, "CAT_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = ValidacionSeguridad.Instance.GetApplicationConnectionString();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CAT_ID, CAT_DESCRIPCION, CAT_EDITABLE, CAT_USUARIO, CAT_FECHA_MOD FROM dbo" +
                ".CATEGORIAS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CRUDDataSet.CATEGORIASDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CRUDDataSet.CATEGORIASDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CRUDDataSet.CATEGORIASDataTable dataTable = new CRUDDataSet.CATEGORIASDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CRUDDataSet.CATEGORIASDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CRUDDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CATEGORIAS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(short Original_CAT_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((short)(Original_CAT_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CAT_DESCRIPCION, string CAT_EDITABLE, string CAT_USUARIO, global::System.Nullable<global::System.DateTime> CAT_FECHA_MOD) {
            if ((CAT_DESCRIPCION == null)) {
                throw new global::System.ArgumentNullException("CAT_DESCRIPCION");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CAT_DESCRIPCION));
            }
            if ((CAT_EDITABLE == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CAT_EDITABLE));
            }
            if ((CAT_USUARIO == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CAT_USUARIO));
            }
            if ((CAT_FECHA_MOD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(CAT_FECHA_MOD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CAT_DESCRIPCION, string CAT_EDITABLE, string CAT_USUARIO, global::System.Nullable<global::System.DateTime> CAT_FECHA_MOD, short Original_CAT_ID, string Original_CAT_DESCRIPCION, string Original_CAT_EDITABLE, string Original_CAT_USUARIO, global::System.Nullable<global::System.DateTime> Original_CAT_FECHA_MOD, short CAT_ID) {
            if ((CAT_DESCRIPCION == null)) {
                throw new global::System.ArgumentNullException("CAT_DESCRIPCION");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CAT_DESCRIPCION));
            }
            if ((CAT_EDITABLE == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(CAT_EDITABLE));
            }
            if ((CAT_USUARIO == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CAT_USUARIO));
            }
            if ((CAT_FECHA_MOD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(CAT_FECHA_MOD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((short)(Original_CAT_ID));
            if ((Original_CAT_DESCRIPCION == null)) {
                throw new global::System.ArgumentNullException("Original_CAT_DESCRIPCION");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_CAT_DESCRIPCION));
            }
            if ((Original_CAT_EDITABLE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_CAT_EDITABLE));
            }
            if ((Original_CAT_USUARIO == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_CAT_USUARIO));
            }
            if ((Original_CAT_FECHA_MOD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_CAT_FECHA_MOD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((short)(CAT_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CAT_DESCRIPCION, string CAT_EDITABLE, string CAT_USUARIO, global::System.Nullable<global::System.DateTime> CAT_FECHA_MOD, short Original_CAT_ID, string Original_CAT_DESCRIPCION, string Original_CAT_EDITABLE, string Original_CAT_USUARIO, global::System.Nullable<global::System.DateTime> Original_CAT_FECHA_MOD) {
            return this.Update(CAT_DESCRIPCION, CAT_EDITABLE, CAT_USUARIO, CAT_FECHA_MOD, Original_CAT_ID, Original_CAT_DESCRIPCION, Original_CAT_EDITABLE, Original_CAT_USUARIO, Original_CAT_FECHA_MOD, Original_CAT_ID);
        }
    }
}

#pragma warning restore 1591